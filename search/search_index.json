{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\uddf3\ufe0f ElectionGuard Web API This is a python API that provides a thin , stateless wrapper around the electionguard-python library to perform ballot encryption, casting, spoiling, and tallying. This API is implemented using FastAPI . If you aren't familiar with ElectionGuard and its concepts, take a stroll through the official documentation first! \ud83d\udc6f\u200d\u2640\ufe0f Two APIs in One The application can run in one of two modes: guardian mode runs features used by Guardians (key ceremony actions, partial tally decryption, etc.) mediator mode runs features used by Mediators (ballot encryption, casting, spoiling, etc.) In practice, you will likely need to run at least one instance of each mode. We provide a single codebase and Docker image, but the mode can be set at runtime. \ud83d\udcbb Requirements NOTE: \ud83d\udc33 = required for running with Docker. \ud83d\udc0d = required for running with Python. \ud83d\udc33\ud83d\udc0d GNU Make is used to simplify the commands and GitHub Actions. This approach is recommended to simplify the command line experience. This is built in for MacOS and Linux. For Windows, setup is simpler with Chocolatey and installing the provided make package . The other Windows option is manually installing make . \ud83d\udc0d Python 3.8 is required to develop this API. If developer uses multiple versions of python, pyenv is suggested to assist version management. \ud83d\udc33 Running with Docker The official Docker image We host a Docker image on both Github Packages and DockerHub . Note: GitHub Packages requires authentication to retrieve the package. This requires a GitHub Access Token and using docker login . Follow GitHub instructions . # Pull the image from DockerHub docker pull docker.pkg.github.com/microsoft/electionguard-web-api/electionguard-web-api:main # Start a container for the API in mediator mode, exposed on port 80 of the host machine docker run -d -p 80:8000 --env API_MODE=mediator docker.pkg.github.com/microsoft/electionguard-web-api/electionguard-web-api:main OR # Pull the image from DockerHub docker pull electionguard/electionguard-web-api:latest # Start a container for the API in mediator mode, exposed on port 80 of the host machine docker run -d -p 80:8000 --env API_MODE=mediator electionguard/electionguard-web-api:latest Developing locally with Docker If you run Docker and want to run the code locally without Python dependencies, we provide a Dockerfile and docker-compose.yml. Run both APIs at the same time: make docker-run Or run both APIs in development mode, with automatic reloading on file change: make docker-dev After either command, you will find the mediator API running at http://127.0.0.1:8000 and the guardian API at http://127.0.0.1:8001 \ud83d\udc0d Running with Python Quick Start Using make , installation and startup can be run with one command: To set up the environment: make environment To start the api: make start API_MODE=mediator OR make start API_MODE=guardian Debugging For local debugging with Visual Studio Code, choose the Guardian Web API or Mediator Web API options from the dropdown in the Run menu. Once the server is up, you can easily hit your breakpoints. If the code fails to run, make sure your Python interpreter is set to use your poetry environment. \ud83e\uddea Testing A Postman collection is available to test the API located in the /tests folder. You can do a few things with this: Import into Postman for easy manual testing. Run locally with the Newman CLI . Run the APIs and tests entirely in Docker by running: bash make docker-test \ud83d\udcdd Documentation FastApi defaultly has API documentation built in. The following is available after running: SwaggerUI at http://127.0.0.1:8000/docs or http://127.0.0.1:8001/docs , depending on the API mode ReDoc at http://127.0.0.1:8000/redoc or http://127.0.0.1:8001/redoc Overviews of the API itself are available on: GitHub Pages Read the Docs \ud83d\uddc4 Archived As of 06/15/2020, the previous C wrapped implementation was transitioned to the python version. ElectionGuard development has transitioned to the ElectionGuard-Python Repo. The old version is available using the dotnet-api tag. \ud83e\udd1d Contributing This project encourages community contributions for development, testing, documentation, code review, and performance analysis, etc. For more information on how to contribute, see [the contribution guidelines][contributing] Code of Conduct This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Reporting Issues Please report any bugs, feature requests, or enhancements using the GitHub Issue Tracker . Please do not report any security vulnerabilities using the Issue Tracker. Instead, please report them to the Microsoft Security Response Center (MSRC) at https://msrc.microsoft.com/create-report . See the [Security Documentation][security] for more information. Have Questions? Electionguard would love for you to ask questions out in the open using GitHub Issues. If you really want to email the ElectionGuard team, reach out at electionguard@microsoft.com. License This repository is licensed under the [MIT License]","title":"Home"},{"location":"#electionguard-web-api","text":"This is a python API that provides a thin , stateless wrapper around the electionguard-python library to perform ballot encryption, casting, spoiling, and tallying. This API is implemented using FastAPI . If you aren't familiar with ElectionGuard and its concepts, take a stroll through the official documentation first!","title":"\ud83d\uddf3\ufe0f ElectionGuard Web API"},{"location":"#two-apis-in-one","text":"The application can run in one of two modes: guardian mode runs features used by Guardians (key ceremony actions, partial tally decryption, etc.) mediator mode runs features used by Mediators (ballot encryption, casting, spoiling, etc.) In practice, you will likely need to run at least one instance of each mode. We provide a single codebase and Docker image, but the mode can be set at runtime.","title":"\ud83d\udc6f\u200d\u2640\ufe0f Two APIs in One"},{"location":"#requirements","text":"NOTE: \ud83d\udc33 = required for running with Docker. \ud83d\udc0d = required for running with Python. \ud83d\udc33\ud83d\udc0d GNU Make is used to simplify the commands and GitHub Actions. This approach is recommended to simplify the command line experience. This is built in for MacOS and Linux. For Windows, setup is simpler with Chocolatey and installing the provided make package . The other Windows option is manually installing make . \ud83d\udc0d Python 3.8 is required to develop this API. If developer uses multiple versions of python, pyenv is suggested to assist version management.","title":"\ud83d\udcbb Requirements"},{"location":"#running-with-docker","text":"","title":"\ud83d\udc33 Running with Docker"},{"location":"#the-official-docker-image","text":"We host a Docker image on both Github Packages and DockerHub . Note: GitHub Packages requires authentication to retrieve the package. This requires a GitHub Access Token and using docker login . Follow GitHub instructions . # Pull the image from DockerHub docker pull docker.pkg.github.com/microsoft/electionguard-web-api/electionguard-web-api:main # Start a container for the API in mediator mode, exposed on port 80 of the host machine docker run -d -p 80:8000 --env API_MODE=mediator docker.pkg.github.com/microsoft/electionguard-web-api/electionguard-web-api:main OR # Pull the image from DockerHub docker pull electionguard/electionguard-web-api:latest # Start a container for the API in mediator mode, exposed on port 80 of the host machine docker run -d -p 80:8000 --env API_MODE=mediator electionguard/electionguard-web-api:latest","title":"The official Docker image"},{"location":"#developing-locally-with-docker","text":"If you run Docker and want to run the code locally without Python dependencies, we provide a Dockerfile and docker-compose.yml. Run both APIs at the same time: make docker-run Or run both APIs in development mode, with automatic reloading on file change: make docker-dev After either command, you will find the mediator API running at http://127.0.0.1:8000 and the guardian API at http://127.0.0.1:8001","title":"Developing locally with Docker"},{"location":"#running-with-python","text":"","title":"\ud83d\udc0d Running with Python"},{"location":"#quick-start","text":"Using make , installation and startup can be run with one command: To set up the environment: make environment To start the api: make start API_MODE=mediator OR make start API_MODE=guardian","title":"Quick Start"},{"location":"#debugging","text":"For local debugging with Visual Studio Code, choose the Guardian Web API or Mediator Web API options from the dropdown in the Run menu. Once the server is up, you can easily hit your breakpoints. If the code fails to run, make sure your Python interpreter is set to use your poetry environment.","title":"Debugging"},{"location":"#testing","text":"A Postman collection is available to test the API located in the /tests folder. You can do a few things with this: Import into Postman for easy manual testing. Run locally with the Newman CLI . Run the APIs and tests entirely in Docker by running: bash make docker-test","title":"\ud83e\uddea Testing"},{"location":"#documentation","text":"FastApi defaultly has API documentation built in. The following is available after running: SwaggerUI at http://127.0.0.1:8000/docs or http://127.0.0.1:8001/docs , depending on the API mode ReDoc at http://127.0.0.1:8000/redoc or http://127.0.0.1:8001/redoc Overviews of the API itself are available on: GitHub Pages Read the Docs","title":"\ud83d\udcdd Documentation"},{"location":"#archived","text":"As of 06/15/2020, the previous C wrapped implementation was transitioned to the python version. ElectionGuard development has transitioned to the ElectionGuard-Python Repo. The old version is available using the dotnet-api tag.","title":"\ud83d\uddc4 Archived"},{"location":"#contributing","text":"This project encourages community contributions for development, testing, documentation, code review, and performance analysis, etc. For more information on how to contribute, see [the contribution guidelines][contributing]","title":"\ud83e\udd1d Contributing"},{"location":"#code-of-conduct","text":"This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"#reporting-issues","text":"Please report any bugs, feature requests, or enhancements using the GitHub Issue Tracker . Please do not report any security vulnerabilities using the Issue Tracker. Instead, please report them to the Microsoft Security Response Center (MSRC) at https://msrc.microsoft.com/create-report . See the [Security Documentation][security] for more information.","title":"Reporting Issues"},{"location":"#have-questions","text":"Electionguard would love for you to ask questions out in the open using GitHub Issues. If you really want to email the ElectionGuard team, reach out at electionguard@microsoft.com.","title":"Have Questions?"},{"location":"#license","text":"This repository is licensed under the [MIT License]","title":"License"}]}